city="東京都"
prefecture+"日野市"
prefecture="日野市"
put
city="Tokyo"
prefecture="hino"
puts(#{ci\
ty})
puts
puts "foo"
city="tokyo"
prefecture="hino"
"#{city} #{prefecture}"
last
puts "#{city} #{prefecture}"
puts "#{city}\\t#{prefecture}"
puts "#{city}\t#{prefecture}"
puts '#{city}\t#{prefecture}'
'#{city}\t#{prefecture}'.length
"#{city}\\t#{prefecture}".length
"#{city}\t#{prefecture}".length
"#{city} #{prefecture}".length
"foobar".empty?
"".empty?
s = "foobar"
if s.empty?\
  "The string is empty"\
else\
  "The string is nonempty"\
end
1+1
x = "foo"
y = ""
puts "Both strings are empty" if x.empty? && y.empty?
puts "One of the strings is empty" if x.empty? || y.empty?
if x.empty? || y.empty?\
  puts "one"\
end
puts "x is not empty" if !x.empty?
nil.to_s
1.to_s
nil.empty?
nil.to_s.empty?      # メソッドチェーンの例
  "The string is empty"
1+3
if s.nil?\
  "The variable is nil"\
elsif s.empty?\
  "The string is empty"\
elsif s.include?("foo")\
  "The string includes 'foo'"\
end
s = "foobar"
if s.nil?\
  "The variable is nil"\
elsif s.empty?\
  "The string is empty"\
elsif s.include?("foo")\
  "The string includes 'foo'"\
end
x = "foo"
nil.to_s.empty?      # メソッドチェーンの例
"foo".nil?
"".empty?
s = "foobar"
if s.empty?\
  "The string is empty"\
else\
  "The string is nonempty"\
end
puts "x is not empty" if !x.empty?
x="foo"
puts "x is not empty" if !x.empty?
string = "foobar"
puts "The string '#{string}' is nonempty." unless string.empty?
false
nil
!!0
"racecar".leng
"racecar".length
"racecar".reverse
s="racecar"
s==s.reverse
puts "It's a palindrome!" if s == s.reverse
puts "It's a palindrome!" if s == s.reverse
s="onomatopoeia"
puts "It's a palindrome!" if s == s.reverse
def string_message(str = '')\
  if str.empty?\
    "It's an empty string!"\
  else\
    "The string is nonempty."\
  end\
end
puts string_message("foobar")
puts string_message("")
puts string_message
empty
"".em
"".empty?
"foo bar     baz".split
"foo bar     baz".split[2]
(0..9).to_a
(0..9).to_s
(0..9).length
(0..9).to_s.length
(0..9).to_s
(0..9).to_s.length
(0..9).to_a.length
a = %w[foo bar baz quux] 
a="A man, a plan, a canal, Panama".split
a.join
s=a.join
s
(1..5).each { |i| puts 2 * i }
3.times { puts "Betelgeuse!" }
(1..5).map { |i| i**2 }
%w[a b c]
%w[a b c].map { |char| char.upcase }
%w[a b c].map { |char| char.upcase }.map { |char| char.downcase }
%w[A B C].map { |char| char.downcase }
%w[A B C].map(&:downcase)
('a'..'z').to_a.shuffle[0..7].join
17 + 42   # 整数の足し算
"foo"   
"foo" + "bar"    # 文字列の結合
first_name = "Michael"
last_name = "Hartl"
first_name + " " + last_name    # 苗字と名前の間に空白を入れた結合
"#{first_name} #{last_name}"    # 式展開を使って結合 (上と全く同じ)
first_name + " " + last_name== "#{first_name} #{last_name}"    # 式展開を使って結合 (上と全く同じ)
puts "foo"  
'#{foo} bar'  
'Newlines (\n) and tabs (\t) both use the backslash character \.'
s = "foobar"
if s.empty?\
  "The string is empty"\
else\
  "The string is nonempty"\
end
string = "foobar"
puts "The string '#{string}' is nonempty." unless string.empty?
def string_message(str = '')\
  return "It's an empty string!" if str.empty?\
  return "The string is nonempty."\
end
puts st
puts string_message
puts string_message('a')
def string_message(str = '')\
  return "It's an empty string!" if str.empty?\
  # return "The string is nonempty."\
end
puts string_message('a')
"foo bar     baz".split
last
(1..5).each { |i| puts 2 * i }
3.times
3.times { puts "Betelgeuse!" }
3.times do puts "Betelgeuse!" end
%w[A B C].map(&:downcase)
"".blank?
"      ".blank?
quit
User.new
a=User.new
a
a
a
a.class
a.class.superclass
a.class.superclass.superclass
ex
exit
user = User.new(name: "Michael Hartl", email: "michael@example.com")
user
user.valid?
user.save
user
user.name
user.name
user.email
User.create(name: "A Nother", email: "another@example.org")
foo = User.create(name: "Foo", email: "foo@bar.com")
foo.destroy
foo
foo.created_at?
foo.created_at
foo.created_at.class
User.find(1)
User.find(3)
User.find_by(email: "michael@example.com")
User.all
user.email = "mhartl@example.net"
user.save
user.email = "foo@bar.com"
user.reload.email
user.updated_at
user.created_at
user.update(name: "The Dude", email: "dude@abides.org")
user.update_attribute(:name, "El Duderino")
User.first
user.save
exit
User.first
exit
user = User.new(name: "", email: "michael@example.com")
user.valid?
user.errors.full_messages
user.save
u=User.new
u.name
u.name=""
u
u.email=""
u
user.valid?
u.valid?
user
u.save
u.errors.messages
u
"a" * 51
("a" * 51).length
"a" * 244 + "@example.com"
("a" * 244 + "@example.com").length
addresses = %w[USER@foo.COM THE_US-ER@foo.bar.org first.last@foo.jp]
addresses.each do |address|\
  puts address\
end
ex
exit
%w[user@example,com user_at_foo.org user.name@example.foo@bar_baz.com foo@bar+baz.com]
exit
exit
user
User.first
User.find(1)
user = User.new(name: "Michael Hartl", email: "michael@example.com")
user
user.valid?
user.save
user
user = User.new(name: "foo", email: "foo@bar.com")
User.find.first
User.find(1)
User.find(2)
foo = User.new(name: "foo", email: "foo@bar.com")
User.find(2)
foo.save
foo
exit
User.find(2)
User.find(3)
u=User.new
u[:name]=""
u[:email]=""
u
u
u.save
u.save
u[:name]=" "
u.save
u[:name]="a"
u
u[:email]="a"
u.save
exit
u.name
u[:name]
user[:name]
User.find(1)
User.find(2)
User.find(3)
User.find(4)
user
foo
exit
user = User.new(name: "", email: "michael@example.com")
user.valid?
user.valid?
exit
user = User.new(name: "", email: "michael@example.com")
user.valid?
exit
user = User.new(name: "", email: "michael@example.com")
user.valid?
user.errors.full_messages
exit
u=User.first
u
u[:name]="a" * 51
u.save
u
u[:name].len
u[:name].length
u[:name].length
exit
u=User.first
u
u[:email]
u[:email]=michael@example,com
u[:email]="michael@example,com"
u[:email]
u.save
u.err
u.errors
u[;name]="aa"
u[:name]="aa"
u
u.save
u.erro
u.errors
exit
u=User.first
u
u[:email]="MM"
u.save
u[:email]="user@example,com"
u
u.save
u.error
u.errors.full_messages
exit
u=User.first
u
u=User.first
User.first
u=User.first
u=User.first
exit
u=User.new(name: "Example User", email: "user@example.com")
u
u.save
u
u.valid?
u.errors
u.errors.full_messages
exit
u=User.new(name: "Example User", email: "user@example.com",\
    password: "foobar", password_confirmation: "foobar")
user = User.new(name: "Example User", email: "user@example.com",\
    password: "foo", password_confirmation: "foo")
u
u.errors
u
u.save
user = User.new(name: "Example User", email: "user@example.com",\
    password: "foo", password_confirmation: "foo")
user
user.save
user.errors.
user.errors.full_messages
rails console
User.create(name: "Michael Hartl", email: "michael@example.com",password: "foobar", password_confirmation: "foobar")
User.first
User.create(name: "Michael Hartl", email: "michael@example.com",password: "foobar", password_confirmation: "foobar")
User.create(name: "foo", email: "foo@example.com",password: "foobar", password_confirmation: "foobar")
User.first
user = User.find_by(email: "michael@example.com")
user
user.password_digest
user.authenticate("not_the_right_password")
user.authenticate("foobaz")
user.authenticate("foobar")
!!user.authenticate("foobar")
rails t
exit
u
u=User.first
u
u[:name]
u[:name]="MI"
u
u[:name]="a"*51
u
u.save
exit
